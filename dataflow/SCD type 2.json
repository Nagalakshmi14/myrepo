{
	"name": "SCD type 2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "source1"
				},
				{
					"name": "source2"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				},
				{
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "isactive"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select2"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "existingRows"
				},
				{
					"name": "onlySQLRows"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "updaterows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> source1",
				"source(output(",
				"          surrogate as integer,",
				"          empid as integer,",
				"          empname as string,",
				"          gender as string,",
				"          country as string,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> source2",
				"source1 derive(isActive = 1) ~> isactive",
				"isactive keyGenerate(output(empid as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"source2 select(mapColumn(",
				"          SQL_surrogate = surrogate,",
				"          SQL_empid = empid,",
				"          SQL_empname = empname,",
				"          SQL_gender = gender,",
				"          SQL_country = country,",
				"          SQLisActive = isActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"source1, select2 lookup(empid == SQL_empid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(SQL_empid)) ~> existingRows",
				"existingRows select(mapColumn(",
				"          SQL_surrogate,",
				"          SQL_empid,",
				"          SQL_empname,",
				"          SQL_gender,",
				"          SQL_country,",
				"          SQLisActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> onlySQLRows",
				"onlySQLRows derive(SQL_isActive = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> updaterows",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     format: 'table') ~> sink1",
				"updaterows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     format: 'table') ~> sink2"
			]
		}
	}
}