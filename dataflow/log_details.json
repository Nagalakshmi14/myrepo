{
	"name": "log_details",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "dummy"
				},
				{
					"name": "log"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_output_copy1",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     ADFName as string,",
				"     PipelineName as string,",
				"     Status as string,",
				"     RunId as string,",
				"     TriggerName as string,",
				"     logFileName as string",
				"}",
				"source(output(",
				"          DepartmentNO as string,",
				"          DNAME as string,",
				"          LOC as string,",
				"          quantity as string,",
				"          runningtotal as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> dummy",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> log",
				"dummy derive(ADFName = $ADFName,",
				"          PipelineName = $PipelineName,",
				"          Status = $Status,",
				"          RunId = $RunId,",
				"          TriggerName = $TriggerName) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          ADFName,",
				"          PipelineName,",
				"          Status,",
				"          RunId,",
				"          TriggerName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($logFileName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}